/* tslint:disable */
/* eslint-disable */
/**
 * CleanArchitecture
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActionUpdateModel } from './ActionUpdateModel';
import {
    ActionUpdateModelFromJSON,
    ActionUpdateModelFromJSONTyped,
    ActionUpdateModelToJSON,
} from './ActionUpdateModel';
import type { ShipmentCompanyUpdateModel } from './ShipmentCompanyUpdateModel';
import {
    ShipmentCompanyUpdateModelFromJSON,
    ShipmentCompanyUpdateModelFromJSONTyped,
    ShipmentCompanyUpdateModelToJSON,
} from './ShipmentCompanyUpdateModel';

/**
 * 
 * @export
 * @interface ActorUpdateModel
 */
export interface ActorUpdateModel {
    /**
     * 
     * @type {ShipmentCompanyUpdateModel}
     * @memberof ActorUpdateModel
     */
    company: ShipmentCompanyUpdateModel;
    /**
     * 
     * @type {ActionUpdateModel}
     * @memberof ActorUpdateModel
     */
    delivery: ActionUpdateModel;
    /**
     * 
     * @type {any}
     * @memberof ActorUpdateModel
     */
    id: any | null;
    /**
     * 
     * @type {ActionUpdateModel}
     * @memberof ActorUpdateModel
     */
    pickup: ActionUpdateModel;
    /**
     * 
     * @type {any}
     * @memberof ActorUpdateModel
     */
    price?: any | null;
    /**
     * 
     * @type {any}
     * @memberof ActorUpdateModel
     */
    progresses?: any | null;
}

/**
 * Check if a given object implements the ActorUpdateModel interface.
 */
export function instanceOfActorUpdateModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "company" in value;
    isInstance = isInstance && "delivery" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "pickup" in value;

    return isInstance;
}

export function ActorUpdateModelFromJSON(json: any): ActorUpdateModel {
    return ActorUpdateModelFromJSONTyped(json, false);
}

export function ActorUpdateModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActorUpdateModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'company': ShipmentCompanyUpdateModelFromJSON(json['company']),
        'delivery': ActionUpdateModelFromJSON(json['delivery']),
        'id': json['id'],
        'pickup': ActionUpdateModelFromJSON(json['pickup']),
        'price': !exists(json, 'price') ? undefined : json['price'],
        'progresses': !exists(json, 'progresses') ? undefined : json['progresses'],
    };
}

export function ActorUpdateModelToJSON(value?: ActorUpdateModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'company': ShipmentCompanyUpdateModelToJSON(value.company),
        'delivery': ActionUpdateModelToJSON(value.delivery),
        'id': value.id,
        'pickup': ActionUpdateModelToJSON(value.pickup),
        'price': value.price,
        'progresses': value.progresses,
    };
}

