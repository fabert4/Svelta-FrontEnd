/* tslint:disable */
/* eslint-disable */
/**
 * CleanArchitecture
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccessCodePlanningModel,
  AccessCodePlanningPaginationResult,
  ConsignmentModel,
  Health,
  MessagePaginationResult,
  PlanningModel,
  PlanningPaginationResult,
  ReportModel,
  RestA1BundledStatusesCreateModel,
  RestA1BundledStatusesIDCreateModel,
  RestA1ChangeOwnPasswordModel,
  RestA1ChangePasswordModel,
  RestA1ConsignmentUpdateModel,
  RestA1CreateAccessCodePlanningModel,
  RestA1CreateUserModel,
  RestA1Email,
  RestA1GenericImport,
  RestA1Int,
  RestA1LoginUserModel,
  RestA1Pagination,
  RestA1ShipmentCreateModel,
  RestA1String,
  RestA1UpdateUserModel,
  RestA2IntString,
  RestA2PaginationBoolean,
  RestA2PaginationInt,
  RestA2PlanningCreateModelBoolean,
  RestA2UUIDAccessCodeNotificationCreate,
  ShipmentPaginationResult,
  UserModel,
  UserPaginationResult,
} from '../models';
import {
    AccessCodePlanningModelFromJSON,
    AccessCodePlanningModelToJSON,
    AccessCodePlanningPaginationResultFromJSON,
    AccessCodePlanningPaginationResultToJSON,
    ConsignmentModelFromJSON,
    ConsignmentModelToJSON,
    HealthFromJSON,
    HealthToJSON,
    MessagePaginationResultFromJSON,
    MessagePaginationResultToJSON,
    PlanningModelFromJSON,
    PlanningModelToJSON,
    PlanningPaginationResultFromJSON,
    PlanningPaginationResultToJSON,
    ReportModelFromJSON,
    ReportModelToJSON,
    RestA1BundledStatusesCreateModelFromJSON,
    RestA1BundledStatusesCreateModelToJSON,
    RestA1BundledStatusesIDCreateModelFromJSON,
    RestA1BundledStatusesIDCreateModelToJSON,
    RestA1ChangeOwnPasswordModelFromJSON,
    RestA1ChangeOwnPasswordModelToJSON,
    RestA1ChangePasswordModelFromJSON,
    RestA1ChangePasswordModelToJSON,
    RestA1ConsignmentUpdateModelFromJSON,
    RestA1ConsignmentUpdateModelToJSON,
    RestA1CreateAccessCodePlanningModelFromJSON,
    RestA1CreateAccessCodePlanningModelToJSON,
    RestA1CreateUserModelFromJSON,
    RestA1CreateUserModelToJSON,
    RestA1EmailFromJSON,
    RestA1EmailToJSON,
    RestA1GenericImportFromJSON,
    RestA1GenericImportToJSON,
    RestA1IntFromJSON,
    RestA1IntToJSON,
    RestA1LoginUserModelFromJSON,
    RestA1LoginUserModelToJSON,
    RestA1PaginationFromJSON,
    RestA1PaginationToJSON,
    RestA1ShipmentCreateModelFromJSON,
    RestA1ShipmentCreateModelToJSON,
    RestA1StringFromJSON,
    RestA1StringToJSON,
    RestA1UpdateUserModelFromJSON,
    RestA1UpdateUserModelToJSON,
    RestA2IntStringFromJSON,
    RestA2IntStringToJSON,
    RestA2PaginationBooleanFromJSON,
    RestA2PaginationBooleanToJSON,
    RestA2PaginationIntFromJSON,
    RestA2PaginationIntToJSON,
    RestA2PlanningCreateModelBooleanFromJSON,
    RestA2PlanningCreateModelBooleanToJSON,
    RestA2UUIDAccessCodeNotificationCreateFromJSON,
    RestA2UUIDAccessCodeNotificationCreateToJSON,
    ShipmentPaginationResultFromJSON,
    ShipmentPaginationResultToJSON,
    UserModelFromJSON,
    UserModelToJSON,
    UserPaginationResultFromJSON,
    UserPaginationResultToJSON,
} from '../models';

export interface ChangeownpasswordPostRequest {
    restA1ChangeOwnPasswordModel: RestA1ChangeOwnPasswordModel;
}

export interface ChangepasswordPostRequest {
    restA1ChangePasswordModel: RestA1ChangePasswordModel;
}

export interface CreateaccesscodePostRequest {
    restA1CreateAccessCodePlanningModel: RestA1CreateAccessCodePlanningModel;
}

export interface CreateaccesscodenotificationPostRequest {
    restA2UUIDAccessCodeNotificationCreate: RestA2UUIDAccessCodeNotificationCreate;
}

export interface CreateidstatusesPostRequest {
    restA1BundledStatusesIDCreateModel: RestA1BundledStatusesIDCreateModel;
}

export interface CreateidstatusesaccesscodePostRequest {
    restA1BundledStatusesIDCreateModel: RestA1BundledStatusesIDCreateModel;
}

export interface CreateshipmentPostRequest {
    restA1ShipmentCreateModel: RestA1ShipmentCreateModel;
}

export interface CreatestatusesPostRequest {
    restA1BundledStatusesCreateModel: RestA1BundledStatusesCreateModel;
}

export interface CreatestatusesaccesscodePostRequest {
    restA1BundledStatusesCreateModel: RestA1BundledStatusesCreateModel;
}

export interface CreateupdateplanningPostRequest {
    restA2PlanningCreateModelBoolean: RestA2PlanningCreateModelBoolean;
}

export interface CreateuserPostRequest {
    restA1CreateUserModel: RestA1CreateUserModel;
}

export interface DeletefirebasetokenPostRequest {
    restA1String: RestA1String;
}

export interface DeleteuserPostRequest {
    restA1Int: RestA1Int;
}

export interface GetconsignmentPostRequest {
    restA1Int: RestA1Int;
}

export interface GetconsignmentaccesscodePostRequest {
    restA1Int: RestA1Int;
}

export interface GetplanningPostRequest {
    restA1Int: RestA1Int;
}

export interface GetplanningbystopPostRequest {
    restA1Int: RestA1Int;
}

export interface GetreportPostRequest {
    restA1Pagination: RestA1Pagination;
}

export interface GetshipmentPostRequest {
    restA1Int: RestA1Int;
}

export interface GetuserPostRequest {
    restA1Int: RestA1Int;
}

export interface GraphqlcreatorPostRequest {
    restA1GenericImport: RestA1GenericImport;
}

export interface ImportshipmentPostRequest {
    restA1ShipmentCreateModel: RestA1ShipmentCreateModel;
}

export interface ImportstatusPostRequest {
    restA1BundledStatusesIDCreateModel: RestA1BundledStatusesIDCreateModel;
}

export interface ListaccesscodesPostRequest {
    restA2PaginationInt: RestA2PaginationInt;
}

export interface ListallshipmentsPostRequest {
    restA1Pagination: RestA1Pagination;
}

export interface ListmessagesPostRequest {
    restA1Pagination: RestA1Pagination;
}

export interface ListplanningsPostRequest {
    restA2PaginationBoolean: RestA2PaginationBoolean;
}

export interface ListselfplanningsPostRequest {
    restA1Pagination: RestA1Pagination;
}

export interface ListselfplanningsaccesscodePostRequest {
    restA1Pagination: RestA1Pagination;
}

export interface ListshipmentsPostRequest {
    restA2PaginationBoolean: RestA2PaginationBoolean;
}

export interface ListusersPostRequest {
    restA1Pagination: RestA1Pagination;
}

export interface LoginuserPostRequest {
    restA1LoginUserModel: RestA1LoginUserModel;
}

export interface RenewmessagePostRequest {
    restA1Int: RestA1Int;
}

export interface SetplanninglicenseplatePostRequest {
    restA2IntString: RestA2IntString;
}

export interface ShareplanningPostRequest {
    restA1Int: RestA1Int;
}

export interface UpdateconsignmentPostRequest {
    restA1ConsignmentUpdateModel: RestA1ConsignmentUpdateModel;
}

export interface UpdatefirebasetokenPostRequest {
    restA1String: RestA1String;
}

export interface UpdateuserPostRequest {
    restA1UpdateUserModel: RestA1UpdateUserModel;
}

export interface UserexistsPostRequest {
    restA1Email: RestA1Email;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * AuthenticatedUser
     * AuthenticatedUser
     */
    async authenticateduserGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/authenticateduser`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserModelFromJSON(jsonValue));
    }

    /**
     * AuthenticatedUser
     * AuthenticatedUser
     */
    async authenticateduserGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserModel> {
        const response = await this.authenticateduserGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * ChangeOwnPassword
     * ChangeOwnPassword
     */
    async changeownpasswordPostRaw(requestParameters: ChangeownpasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserModel>> {
        if (requestParameters.restA1ChangeOwnPasswordModel === null || requestParameters.restA1ChangeOwnPasswordModel === undefined) {
            throw new runtime.RequiredError('restA1ChangeOwnPasswordModel','Required parameter requestParameters.restA1ChangeOwnPasswordModel was null or undefined when calling changeownpasswordPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/changeownpassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1ChangeOwnPasswordModelToJSON(requestParameters.restA1ChangeOwnPasswordModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserModelFromJSON(jsonValue));
    }

    /**
     * ChangeOwnPassword
     * ChangeOwnPassword
     */
    async changeownpasswordPost(requestParameters: ChangeownpasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserModel> {
        const response = await this.changeownpasswordPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ChangePassword
     * ChangePassword
     */
    async changepasswordPostRaw(requestParameters: ChangepasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserModel>> {
        if (requestParameters.restA1ChangePasswordModel === null || requestParameters.restA1ChangePasswordModel === undefined) {
            throw new runtime.RequiredError('restA1ChangePasswordModel','Required parameter requestParameters.restA1ChangePasswordModel was null or undefined when calling changepasswordPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/changepassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1ChangePasswordModelToJSON(requestParameters.restA1ChangePasswordModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserModelFromJSON(jsonValue));
    }

    /**
     * ChangePassword
     * ChangePassword
     */
    async changepasswordPost(requestParameters: ChangepasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserModel> {
        const response = await this.changepasswordPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateAccessCode
     * CreateAccessCode
     */
    async createaccesscodePostRaw(requestParameters: CreateaccesscodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessCodePlanningModel>> {
        if (requestParameters.restA1CreateAccessCodePlanningModel === null || requestParameters.restA1CreateAccessCodePlanningModel === undefined) {
            throw new runtime.RequiredError('restA1CreateAccessCodePlanningModel','Required parameter requestParameters.restA1CreateAccessCodePlanningModel was null or undefined when calling createaccesscodePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/createaccesscode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1CreateAccessCodePlanningModelToJSON(requestParameters.restA1CreateAccessCodePlanningModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessCodePlanningModelFromJSON(jsonValue));
    }

    /**
     * CreateAccessCode
     * CreateAccessCode
     */
    async createaccesscodePost(requestParameters: CreateaccesscodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessCodePlanningModel> {
        const response = await this.createaccesscodePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateAccessCodeNotification
     * CreateAccessCodeNotification
     */
    async createaccesscodenotificationPostRaw(requestParameters: CreateaccesscodenotificationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.restA2UUIDAccessCodeNotificationCreate === null || requestParameters.restA2UUIDAccessCodeNotificationCreate === undefined) {
            throw new runtime.RequiredError('restA2UUIDAccessCodeNotificationCreate','Required parameter requestParameters.restA2UUIDAccessCodeNotificationCreate was null or undefined when calling createaccesscodenotificationPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/createaccesscodenotification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA2UUIDAccessCodeNotificationCreateToJSON(requestParameters.restA2UUIDAccessCodeNotificationCreate),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * CreateAccessCodeNotification
     * CreateAccessCodeNotification
     */
    async createaccesscodenotificationPost(requestParameters: CreateaccesscodenotificationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createaccesscodenotificationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateIDStatuses
     * CreateIDStatuses
     */
    async createidstatusesPostRaw(requestParameters: CreateidstatusesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.restA1BundledStatusesIDCreateModel === null || requestParameters.restA1BundledStatusesIDCreateModel === undefined) {
            throw new runtime.RequiredError('restA1BundledStatusesIDCreateModel','Required parameter requestParameters.restA1BundledStatusesIDCreateModel was null or undefined when calling createidstatusesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/createidstatuses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1BundledStatusesIDCreateModelToJSON(requestParameters.restA1BundledStatusesIDCreateModel),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * CreateIDStatuses
     * CreateIDStatuses
     */
    async createidstatusesPost(requestParameters: CreateidstatusesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createidstatusesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateIDStatusesAccessCode
     * CreateIDStatusesAccessCode
     */
    async createidstatusesaccesscodePostRaw(requestParameters: CreateidstatusesaccesscodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.restA1BundledStatusesIDCreateModel === null || requestParameters.restA1BundledStatusesIDCreateModel === undefined) {
            throw new runtime.RequiredError('restA1BundledStatusesIDCreateModel','Required parameter requestParameters.restA1BundledStatusesIDCreateModel was null or undefined when calling createidstatusesaccesscodePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/createidstatusesaccesscode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1BundledStatusesIDCreateModelToJSON(requestParameters.restA1BundledStatusesIDCreateModel),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * CreateIDStatusesAccessCode
     * CreateIDStatusesAccessCode
     */
    async createidstatusesaccesscodePost(requestParameters: CreateidstatusesaccesscodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createidstatusesaccesscodePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateShipment
     * CreateShipment
     */
    async createshipmentPostRaw(requestParameters: CreateshipmentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.restA1ShipmentCreateModel === null || requestParameters.restA1ShipmentCreateModel === undefined) {
            throw new runtime.RequiredError('restA1ShipmentCreateModel','Required parameter requestParameters.restA1ShipmentCreateModel was null or undefined when calling createshipmentPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/createshipment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1ShipmentCreateModelToJSON(requestParameters.restA1ShipmentCreateModel),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * CreateShipment
     * CreateShipment
     */
    async createshipmentPost(requestParameters: CreateshipmentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createshipmentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateStatuses
     * CreateStatuses
     */
    async createstatusesPostRaw(requestParameters: CreatestatusesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.restA1BundledStatusesCreateModel === null || requestParameters.restA1BundledStatusesCreateModel === undefined) {
            throw new runtime.RequiredError('restA1BundledStatusesCreateModel','Required parameter requestParameters.restA1BundledStatusesCreateModel was null or undefined when calling createstatusesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/createstatuses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1BundledStatusesCreateModelToJSON(requestParameters.restA1BundledStatusesCreateModel),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * CreateStatuses
     * CreateStatuses
     */
    async createstatusesPost(requestParameters: CreatestatusesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createstatusesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateStatusesAccessCode
     * CreateStatusesAccessCode
     */
    async createstatusesaccesscodePostRaw(requestParameters: CreatestatusesaccesscodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.restA1BundledStatusesCreateModel === null || requestParameters.restA1BundledStatusesCreateModel === undefined) {
            throw new runtime.RequiredError('restA1BundledStatusesCreateModel','Required parameter requestParameters.restA1BundledStatusesCreateModel was null or undefined when calling createstatusesaccesscodePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/createstatusesaccesscode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1BundledStatusesCreateModelToJSON(requestParameters.restA1BundledStatusesCreateModel),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * CreateStatusesAccessCode
     * CreateStatusesAccessCode
     */
    async createstatusesaccesscodePost(requestParameters: CreatestatusesaccesscodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createstatusesaccesscodePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateUpdatePlanning
     * CreateUpdatePlanning
     */
    async createupdateplanningPostRaw(requestParameters: CreateupdateplanningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanningModel>> {
        if (requestParameters.restA2PlanningCreateModelBoolean === null || requestParameters.restA2PlanningCreateModelBoolean === undefined) {
            throw new runtime.RequiredError('restA2PlanningCreateModelBoolean','Required parameter requestParameters.restA2PlanningCreateModelBoolean was null or undefined when calling createupdateplanningPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/createupdateplanning`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA2PlanningCreateModelBooleanToJSON(requestParameters.restA2PlanningCreateModelBoolean),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanningModelFromJSON(jsonValue));
    }

    /**
     * CreateUpdatePlanning
     * CreateUpdatePlanning
     */
    async createupdateplanningPost(requestParameters: CreateupdateplanningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanningModel> {
        const response = await this.createupdateplanningPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateUser
     * CreateUser
     */
    async createuserPostRaw(requestParameters: CreateuserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserModel>> {
        if (requestParameters.restA1CreateUserModel === null || requestParameters.restA1CreateUserModel === undefined) {
            throw new runtime.RequiredError('restA1CreateUserModel','Required parameter requestParameters.restA1CreateUserModel was null or undefined when calling createuserPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/createuser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1CreateUserModelToJSON(requestParameters.restA1CreateUserModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserModelFromJSON(jsonValue));
    }

    /**
     * CreateUser
     * CreateUser
     */
    async createuserPost(requestParameters: CreateuserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserModel> {
        const response = await this.createuserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DeleteFirebaseToken
     * DeleteFirebaseToken
     */
    async deletefirebasetokenPostRaw(requestParameters: DeletefirebasetokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.restA1String === null || requestParameters.restA1String === undefined) {
            throw new runtime.RequiredError('restA1String','Required parameter requestParameters.restA1String was null or undefined when calling deletefirebasetokenPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/deletefirebasetoken`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1StringToJSON(requestParameters.restA1String),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * DeleteFirebaseToken
     * DeleteFirebaseToken
     */
    async deletefirebasetokenPost(requestParameters: DeletefirebasetokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deletefirebasetokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DeleteUser
     * DeleteUser
     */
    async deleteuserPostRaw(requestParameters: DeleteuserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.restA1Int === null || requestParameters.restA1Int === undefined) {
            throw new runtime.RequiredError('restA1Int','Required parameter requestParameters.restA1Int was null or undefined when calling deleteuserPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/deleteuser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1IntToJSON(requestParameters.restA1Int),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * DeleteUser
     * DeleteUser
     */
    async deleteuserPost(requestParameters: DeleteuserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteuserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetAbout
     * GetAbout
     */
    async getaboutGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/getabout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * GetAbout
     * GetAbout
     */
    async getaboutGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getaboutGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * GetConsignment
     * GetConsignment
     */
    async getconsignmentPostRaw(requestParameters: GetconsignmentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConsignmentModel>> {
        if (requestParameters.restA1Int === null || requestParameters.restA1Int === undefined) {
            throw new runtime.RequiredError('restA1Int','Required parameter requestParameters.restA1Int was null or undefined when calling getconsignmentPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/getconsignment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1IntToJSON(requestParameters.restA1Int),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsignmentModelFromJSON(jsonValue));
    }

    /**
     * GetConsignment
     * GetConsignment
     */
    async getconsignmentPost(requestParameters: GetconsignmentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsignmentModel> {
        const response = await this.getconsignmentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetConsignmentAccessCode
     * GetConsignmentAccessCode
     */
    async getconsignmentaccesscodePostRaw(requestParameters: GetconsignmentaccesscodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConsignmentModel>> {
        if (requestParameters.restA1Int === null || requestParameters.restA1Int === undefined) {
            throw new runtime.RequiredError('restA1Int','Required parameter requestParameters.restA1Int was null or undefined when calling getconsignmentaccesscodePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/getconsignmentaccesscode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1IntToJSON(requestParameters.restA1Int),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsignmentModelFromJSON(jsonValue));
    }

    /**
     * GetConsignmentAccessCode
     * GetConsignmentAccessCode
     */
    async getconsignmentaccesscodePost(requestParameters: GetconsignmentaccesscodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsignmentModel> {
        const response = await this.getconsignmentaccesscodePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetHealth
     * GetHealth
     */
    async gethealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Health>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gethealth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthFromJSON(jsonValue));
    }

    /**
     * GetHealth
     * GetHealth
     */
    async gethealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Health> {
        const response = await this.gethealthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * GetPlanning
     * GetPlanning
     */
    async getplanningPostRaw(requestParameters: GetplanningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanningModel>> {
        if (requestParameters.restA1Int === null || requestParameters.restA1Int === undefined) {
            throw new runtime.RequiredError('restA1Int','Required parameter requestParameters.restA1Int was null or undefined when calling getplanningPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/getplanning`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1IntToJSON(requestParameters.restA1Int),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanningModelFromJSON(jsonValue));
    }

    /**
     * GetPlanning
     * GetPlanning
     */
    async getplanningPost(requestParameters: GetplanningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanningModel> {
        const response = await this.getplanningPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetPlanningByStop
     * GetPlanningByStop
     */
    async getplanningbystopPostRaw(requestParameters: GetplanningbystopPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanningModel>> {
        if (requestParameters.restA1Int === null || requestParameters.restA1Int === undefined) {
            throw new runtime.RequiredError('restA1Int','Required parameter requestParameters.restA1Int was null or undefined when calling getplanningbystopPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/getplanningbystop`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1IntToJSON(requestParameters.restA1Int),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanningModelFromJSON(jsonValue));
    }

    /**
     * GetPlanningByStop
     * GetPlanningByStop
     */
    async getplanningbystopPost(requestParameters: GetplanningbystopPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanningModel> {
        const response = await this.getplanningbystopPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetReport
     * GetReport
     */
    async getreportPostRaw(requestParameters: GetreportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportModel>> {
        if (requestParameters.restA1Pagination === null || requestParameters.restA1Pagination === undefined) {
            throw new runtime.RequiredError('restA1Pagination','Required parameter requestParameters.restA1Pagination was null or undefined when calling getreportPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/getreport`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1PaginationToJSON(requestParameters.restA1Pagination),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportModelFromJSON(jsonValue));
    }

    /**
     * GetReport
     * GetReport
     */
    async getreportPost(requestParameters: GetreportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportModel> {
        const response = await this.getreportPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetShipment
     * GetShipment
     */
    async getshipmentPostRaw(requestParameters: GetshipmentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.restA1Int === null || requestParameters.restA1Int === undefined) {
            throw new runtime.RequiredError('restA1Int','Required parameter requestParameters.restA1Int was null or undefined when calling getshipmentPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/getshipment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1IntToJSON(requestParameters.restA1Int),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * GetShipment
     * GetShipment
     */
    async getshipmentPost(requestParameters: GetshipmentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getshipmentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetUser
     * GetUser
     */
    async getuserPostRaw(requestParameters: GetuserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserModel>> {
        if (requestParameters.restA1Int === null || requestParameters.restA1Int === undefined) {
            throw new runtime.RequiredError('restA1Int','Required parameter requestParameters.restA1Int was null or undefined when calling getuserPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/getuser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1IntToJSON(requestParameters.restA1Int),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserModelFromJSON(jsonValue));
    }

    /**
     * GetUser
     * GetUser
     */
    async getuserPost(requestParameters: GetuserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserModel> {
        const response = await this.getuserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GraphqlCreator
     * GraphqlCreator
     */
    async graphqlcreatorPostRaw(requestParameters: GraphqlcreatorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.restA1GenericImport === null || requestParameters.restA1GenericImport === undefined) {
            throw new runtime.RequiredError('restA1GenericImport','Required parameter requestParameters.restA1GenericImport was null or undefined when calling graphqlcreatorPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/graphqlcreator`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1GenericImportToJSON(requestParameters.restA1GenericImport),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * GraphqlCreator
     * GraphqlCreator
     */
    async graphqlcreatorPost(requestParameters: GraphqlcreatorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.graphqlcreatorPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ImportShipment
     * ImportShipment
     */
    async importshipmentPostRaw(requestParameters: ImportshipmentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.restA1ShipmentCreateModel === null || requestParameters.restA1ShipmentCreateModel === undefined) {
            throw new runtime.RequiredError('restA1ShipmentCreateModel','Required parameter requestParameters.restA1ShipmentCreateModel was null or undefined when calling importshipmentPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/importshipment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1ShipmentCreateModelToJSON(requestParameters.restA1ShipmentCreateModel),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * ImportShipment
     * ImportShipment
     */
    async importshipmentPost(requestParameters: ImportshipmentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.importshipmentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ImportStatus
     * ImportStatus
     */
    async importstatusPostRaw(requestParameters: ImportstatusPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.restA1BundledStatusesIDCreateModel === null || requestParameters.restA1BundledStatusesIDCreateModel === undefined) {
            throw new runtime.RequiredError('restA1BundledStatusesIDCreateModel','Required parameter requestParameters.restA1BundledStatusesIDCreateModel was null or undefined when calling importstatusPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/importstatus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1BundledStatusesIDCreateModelToJSON(requestParameters.restA1BundledStatusesIDCreateModel),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * ImportStatus
     * ImportStatus
     */
    async importstatusPost(requestParameters: ImportstatusPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.importstatusPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ListAccessCodes
     * ListAccessCodes
     */
    async listaccesscodesPostRaw(requestParameters: ListaccesscodesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessCodePlanningPaginationResult>> {
        if (requestParameters.restA2PaginationInt === null || requestParameters.restA2PaginationInt === undefined) {
            throw new runtime.RequiredError('restA2PaginationInt','Required parameter requestParameters.restA2PaginationInt was null or undefined when calling listaccesscodesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/listaccesscodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA2PaginationIntToJSON(requestParameters.restA2PaginationInt),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessCodePlanningPaginationResultFromJSON(jsonValue));
    }

    /**
     * ListAccessCodes
     * ListAccessCodes
     */
    async listaccesscodesPost(requestParameters: ListaccesscodesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessCodePlanningPaginationResult> {
        const response = await this.listaccesscodesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ListAllShipments
     * ListAllShipments
     */
    async listallshipmentsPostRaw(requestParameters: ListallshipmentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShipmentPaginationResult>> {
        if (requestParameters.restA1Pagination === null || requestParameters.restA1Pagination === undefined) {
            throw new runtime.RequiredError('restA1Pagination','Required parameter requestParameters.restA1Pagination was null or undefined when calling listallshipmentsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/listallshipments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1PaginationToJSON(requestParameters.restA1Pagination),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShipmentPaginationResultFromJSON(jsonValue));
    }

    /**
     * ListAllShipments
     * ListAllShipments
     */
    async listallshipmentsPost(requestParameters: ListallshipmentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShipmentPaginationResult> {
        const response = await this.listallshipmentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ListMessages
     * ListMessages
     */
    async listmessagesPostRaw(requestParameters: ListmessagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessagePaginationResult>> {
        if (requestParameters.restA1Pagination === null || requestParameters.restA1Pagination === undefined) {
            throw new runtime.RequiredError('restA1Pagination','Required parameter requestParameters.restA1Pagination was null or undefined when calling listmessagesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/listmessages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1PaginationToJSON(requestParameters.restA1Pagination),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessagePaginationResultFromJSON(jsonValue));
    }

    /**
     * ListMessages
     * ListMessages
     */
    async listmessagesPost(requestParameters: ListmessagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessagePaginationResult> {
        const response = await this.listmessagesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ListPackagingTypes
     * ListPackagingTypes
     */
    async listpackagingtypesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/listpackagingtypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * ListPackagingTypes
     * ListPackagingTypes
     */
    async listpackagingtypesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listpackagingtypesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * ListPlannings
     * ListPlannings
     */
    async listplanningsPostRaw(requestParameters: ListplanningsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanningPaginationResult>> {
        if (requestParameters.restA2PaginationBoolean === null || requestParameters.restA2PaginationBoolean === undefined) {
            throw new runtime.RequiredError('restA2PaginationBoolean','Required parameter requestParameters.restA2PaginationBoolean was null or undefined when calling listplanningsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/listplannings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA2PaginationBooleanToJSON(requestParameters.restA2PaginationBoolean),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanningPaginationResultFromJSON(jsonValue));
    }

    /**
     * ListPlannings
     * ListPlannings
     */
    async listplanningsPost(requestParameters: ListplanningsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanningPaginationResult> {
        const response = await this.listplanningsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ListSelfPlannings
     * ListSelfPlannings
     */
    async listselfplanningsPostRaw(requestParameters: ListselfplanningsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanningPaginationResult>> {
        if (requestParameters.restA1Pagination === null || requestParameters.restA1Pagination === undefined) {
            throw new runtime.RequiredError('restA1Pagination','Required parameter requestParameters.restA1Pagination was null or undefined when calling listselfplanningsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/listselfplannings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1PaginationToJSON(requestParameters.restA1Pagination),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanningPaginationResultFromJSON(jsonValue));
    }

    /**
     * ListSelfPlannings
     * ListSelfPlannings
     */
    async listselfplanningsPost(requestParameters: ListselfplanningsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanningPaginationResult> {
        const response = await this.listselfplanningsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ListSelfPlanningsAccessCode
     * ListSelfPlanningsAccessCode
     */
    async listselfplanningsaccesscodePostRaw(requestParameters: ListselfplanningsaccesscodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanningPaginationResult>> {
        if (requestParameters.restA1Pagination === null || requestParameters.restA1Pagination === undefined) {
            throw new runtime.RequiredError('restA1Pagination','Required parameter requestParameters.restA1Pagination was null or undefined when calling listselfplanningsaccesscodePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/listselfplanningsaccesscode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1PaginationToJSON(requestParameters.restA1Pagination),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanningPaginationResultFromJSON(jsonValue));
    }

    /**
     * ListSelfPlanningsAccessCode
     * ListSelfPlanningsAccessCode
     */
    async listselfplanningsaccesscodePost(requestParameters: ListselfplanningsaccesscodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanningPaginationResult> {
        const response = await this.listselfplanningsaccesscodePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ListShipments
     * ListShipments
     */
    async listshipmentsPostRaw(requestParameters: ListshipmentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShipmentPaginationResult>> {
        if (requestParameters.restA2PaginationBoolean === null || requestParameters.restA2PaginationBoolean === undefined) {
            throw new runtime.RequiredError('restA2PaginationBoolean','Required parameter requestParameters.restA2PaginationBoolean was null or undefined when calling listshipmentsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/listshipments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA2PaginationBooleanToJSON(requestParameters.restA2PaginationBoolean),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShipmentPaginationResultFromJSON(jsonValue));
    }

    /**
     * ListShipments
     * ListShipments
     */
    async listshipmentsPost(requestParameters: ListshipmentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShipmentPaginationResult> {
        const response = await this.listshipmentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ListUsers
     * ListUsers
     */
    async listusersPostRaw(requestParameters: ListusersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPaginationResult>> {
        if (requestParameters.restA1Pagination === null || requestParameters.restA1Pagination === undefined) {
            throw new runtime.RequiredError('restA1Pagination','Required parameter requestParameters.restA1Pagination was null or undefined when calling listusersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/listusers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1PaginationToJSON(requestParameters.restA1Pagination),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPaginationResultFromJSON(jsonValue));
    }

    /**
     * ListUsers
     * ListUsers
     */
    async listusersPost(requestParameters: ListusersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPaginationResult> {
        const response = await this.listusersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LoginUser
     * LoginUser
     */
    async loginuserPostRaw(requestParameters: LoginuserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.restA1LoginUserModel === null || requestParameters.restA1LoginUserModel === undefined) {
            throw new runtime.RequiredError('restA1LoginUserModel','Required parameter requestParameters.restA1LoginUserModel was null or undefined when calling loginuserPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/loginuser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1LoginUserModelToJSON(requestParameters.restA1LoginUserModel),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * LoginUser
     * LoginUser
     */
    async loginuserPost(requestParameters: LoginuserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.loginuserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * RenewMessage
     * RenewMessage
     */
    async renewmessagePostRaw(requestParameters: RenewmessagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.restA1Int === null || requestParameters.restA1Int === undefined) {
            throw new runtime.RequiredError('restA1Int','Required parameter requestParameters.restA1Int was null or undefined when calling renewmessagePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/renewmessage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1IntToJSON(requestParameters.restA1Int),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * RenewMessage
     * RenewMessage
     */
    async renewmessagePost(requestParameters: RenewmessagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.renewmessagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SetPlanningLicensePlate
     * SetPlanningLicensePlate
     */
    async setplanninglicenseplatePostRaw(requestParameters: SetplanninglicenseplatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanningModel>> {
        if (requestParameters.restA2IntString === null || requestParameters.restA2IntString === undefined) {
            throw new runtime.RequiredError('restA2IntString','Required parameter requestParameters.restA2IntString was null or undefined when calling setplanninglicenseplatePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/setplanninglicenseplate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA2IntStringToJSON(requestParameters.restA2IntString),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanningModelFromJSON(jsonValue));
    }

    /**
     * SetPlanningLicensePlate
     * SetPlanningLicensePlate
     */
    async setplanninglicenseplatePost(requestParameters: SetplanninglicenseplatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanningModel> {
        const response = await this.setplanninglicenseplatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SharePlanning
     * SharePlanning
     */
    async shareplanningPostRaw(requestParameters: ShareplanningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.restA1Int === null || requestParameters.restA1Int === undefined) {
            throw new runtime.RequiredError('restA1Int','Required parameter requestParameters.restA1Int was null or undefined when calling shareplanningPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shareplanning`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1IntToJSON(requestParameters.restA1Int),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * SharePlanning
     * SharePlanning
     */
    async shareplanningPost(requestParameters: ShareplanningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.shareplanningPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SharePlanningAccessCode
     * SharePlanningAccessCode
     */
    async shareplanningaccesscodeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shareplanningaccesscode`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * SharePlanningAccessCode
     * SharePlanningAccessCode
     */
    async shareplanningaccesscodeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.shareplanningaccesscodeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Sync
     * Sync
     */
    async syncGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sync`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Sync
     * Sync
     */
    async syncGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.syncGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * UpdateConsignment
     * UpdateConsignment
     */
    async updateconsignmentPostRaw(requestParameters: UpdateconsignmentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConsignmentModel>> {
        if (requestParameters.restA1ConsignmentUpdateModel === null || requestParameters.restA1ConsignmentUpdateModel === undefined) {
            throw new runtime.RequiredError('restA1ConsignmentUpdateModel','Required parameter requestParameters.restA1ConsignmentUpdateModel was null or undefined when calling updateconsignmentPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/updateconsignment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1ConsignmentUpdateModelToJSON(requestParameters.restA1ConsignmentUpdateModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsignmentModelFromJSON(jsonValue));
    }

    /**
     * UpdateConsignment
     * UpdateConsignment
     */
    async updateconsignmentPost(requestParameters: UpdateconsignmentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsignmentModel> {
        const response = await this.updateconsignmentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UpdateFirebaseToken
     * UpdateFirebaseToken
     */
    async updatefirebasetokenPostRaw(requestParameters: UpdatefirebasetokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.restA1String === null || requestParameters.restA1String === undefined) {
            throw new runtime.RequiredError('restA1String','Required parameter requestParameters.restA1String was null or undefined when calling updatefirebasetokenPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/updatefirebasetoken`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1StringToJSON(requestParameters.restA1String),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * UpdateFirebaseToken
     * UpdateFirebaseToken
     */
    async updatefirebasetokenPost(requestParameters: UpdatefirebasetokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updatefirebasetokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UpdateUser
     * UpdateUser
     */
    async updateuserPostRaw(requestParameters: UpdateuserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserModel>> {
        if (requestParameters.restA1UpdateUserModel === null || requestParameters.restA1UpdateUserModel === undefined) {
            throw new runtime.RequiredError('restA1UpdateUserModel','Required parameter requestParameters.restA1UpdateUserModel was null or undefined when calling updateuserPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/updateuser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1UpdateUserModelToJSON(requestParameters.restA1UpdateUserModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserModelFromJSON(jsonValue));
    }

    /**
     * UpdateUser
     * UpdateUser
     */
    async updateuserPost(requestParameters: UpdateuserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserModel> {
        const response = await this.updateuserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserExists
     * UserExists
     */
    async userexistsPostRaw(requestParameters: UserexistsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.restA1Email === null || requestParameters.restA1Email === undefined) {
            throw new runtime.RequiredError('restA1Email','Required parameter requestParameters.restA1Email was null or undefined when calling userexistsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/userexists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestA1EmailToJSON(requestParameters.restA1Email),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * UserExists
     * UserExists
     */
    async userexistsPost(requestParameters: UserexistsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.userexistsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
