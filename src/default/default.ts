/**
 * Generated by orval v6.9.6 üç∫
 * Do not edit manually.
 * CleanArchitecture
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@sveltestack/svelte-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryStoreResult,
  QueryKey
} from '@sveltestack/svelte-query'
import type {
  Health,
  UserModel,
  RestA1UpdateUserModel,
  PlanningModel,
  RestA1Int,
  Boolean,
  RestA1String,
  RestA1CreateUserModel,
  Int,
  RestA1ShipmentCreateModel,
  ListPackagingTypeModel,
  RestA1BundledStatusesCreateModel,
  RestA1ChangePasswordModel,
  ListPairStringString,
  RestA2IntString,
  AccessCodePlanningPaginationResult,
  RestA2PaginationInt,
  ShipmentPaginationResult,
  RestA1Pagination,
  ShipmentModel,
  ConsignmentModel,
  RestA1ConsignmentUpdateModel,
  RestA1BundledStatusesIDCreateModel,
  UserPaginationResult,
  RestA2UUIDAccessCodeNotificationCreate,
  PlanningPaginationResult,
  RestA2PaginationBoolean,
  AccessCodePlanningModel,
  RestA1CreateAccessCodePlanningModel,
  RestA1GenericImport,
  RestA1ChangeOwnPasswordModel,
  String,
  RestA1LoginUserModel,
  MessagePaginationResult,
  ReportModel,
  RestA1Email,
  RestA2PlanningCreateModelBoolean
} from '../model'


/**
 * GetHealth
 * @summary GetHealth
 */
export const getGethealth = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Health>> => {
    return axios.get(
      `/gethealth`,options
    );
  }


export const getGetGethealthQueryKey = () => [`/gethealth`];

    
export type GetGethealthQueryResult = NonNullable<Awaited<ReturnType<typeof getGethealth>>>
export type GetGethealthQueryError = AxiosError<unknown>

export const useGetGethealth = <TData = Awaited<ReturnType<typeof getGethealth>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getGethealth>>, TError, TData>, axios?: AxiosRequestConfig}

  ): UseQueryStoreResult<Awaited<ReturnType<typeof getGethealth>>, TError, TData, QueryKey> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGethealthQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGethealth>>> = ({ signal }) => getGethealth({ signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof getGethealth>>, TError, TData>(queryKey, queryFn, queryOptions) as UseQueryStoreResult<Awaited<ReturnType<typeof getGethealth>>, TError, TData, QueryKey> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * UpdateUser
 * @summary UpdateUser
 */
export const postUpdateuser = (
    restA1UpdateUserModel: RestA1UpdateUserModel, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserModel>> => {
    return axios.post(
      `/updateuser`,
      restA1UpdateUserModel,options
    );
  }



    export type PostUpdateuserMutationResult = NonNullable<Awaited<ReturnType<typeof postUpdateuser>>>
    export type PostUpdateuserMutationBody = RestA1UpdateUserModel
    export type PostUpdateuserMutationError = AxiosError<unknown>

    export const usePostUpdateuser = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUpdateuser>>, TError,{data: RestA1UpdateUserModel}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUpdateuser>>, {data: RestA1UpdateUserModel}> = (props) => {
          const {data} = props ?? {};

          return  postUpdateuser(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postUpdateuser>>, TError, {data: RestA1UpdateUserModel}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * GetPlanning
 * @summary GetPlanning
 */
export const postGetplanning = (
    restA1Int: RestA1Int, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlanningModel>> => {
    return axios.post(
      `/getplanning`,
      restA1Int,options
    );
  }



    export type PostGetplanningMutationResult = NonNullable<Awaited<ReturnType<typeof postGetplanning>>>
    export type PostGetplanningMutationBody = RestA1Int
    export type PostGetplanningMutationError = AxiosError<unknown>

    export const usePostGetplanning = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postGetplanning>>, TError,{data: RestA1Int}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postGetplanning>>, {data: RestA1Int}> = (props) => {
          const {data} = props ?? {};

          return  postGetplanning(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postGetplanning>>, TError, {data: RestA1Int}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * DeleteFirebaseToken
 * @summary DeleteFirebaseToken
 */
export const postDeletefirebasetoken = (
    restA1String: RestA1String, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Boolean>> => {
    return axios.post(
      `/deletefirebasetoken`,
      restA1String,options
    );
  }



    export type PostDeletefirebasetokenMutationResult = NonNullable<Awaited<ReturnType<typeof postDeletefirebasetoken>>>
    export type PostDeletefirebasetokenMutationBody = RestA1String
    export type PostDeletefirebasetokenMutationError = AxiosError<unknown>

    export const usePostDeletefirebasetoken = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDeletefirebasetoken>>, TError,{data: RestA1String}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDeletefirebasetoken>>, {data: RestA1String}> = (props) => {
          const {data} = props ?? {};

          return  postDeletefirebasetoken(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postDeletefirebasetoken>>, TError, {data: RestA1String}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * CreateUser
 * @summary CreateUser
 */
export const postCreateuser = (
    restA1CreateUserModel: RestA1CreateUserModel, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserModel>> => {
    return axios.post(
      `/createuser`,
      restA1CreateUserModel,options
    );
  }



    export type PostCreateuserMutationResult = NonNullable<Awaited<ReturnType<typeof postCreateuser>>>
    export type PostCreateuserMutationBody = RestA1CreateUserModel
    export type PostCreateuserMutationError = AxiosError<unknown>

    export const usePostCreateuser = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCreateuser>>, TError,{data: RestA1CreateUserModel}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCreateuser>>, {data: RestA1CreateUserModel}> = (props) => {
          const {data} = props ?? {};

          return  postCreateuser(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postCreateuser>>, TError, {data: RestA1CreateUserModel}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * ImportShipment
 * @summary ImportShipment
 */
export const postImportshipment = (
    restA1ShipmentCreateModel: RestA1ShipmentCreateModel, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Int>> => {
    return axios.post(
      `/importshipment`,
      restA1ShipmentCreateModel,options
    );
  }



    export type PostImportshipmentMutationResult = NonNullable<Awaited<ReturnType<typeof postImportshipment>>>
    export type PostImportshipmentMutationBody = RestA1ShipmentCreateModel
    export type PostImportshipmentMutationError = AxiosError<unknown>

    export const usePostImportshipment = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postImportshipment>>, TError,{data: RestA1ShipmentCreateModel}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postImportshipment>>, {data: RestA1ShipmentCreateModel}> = (props) => {
          const {data} = props ?? {};

          return  postImportshipment(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postImportshipment>>, TError, {data: RestA1ShipmentCreateModel}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * ListPackagingTypes
 * @summary ListPackagingTypes
 */
export const getListpackagingtypes = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ListPackagingTypeModel>> => {
    return axios.get(
      `/listpackagingtypes`,options
    );
  }


export const getGetListpackagingtypesQueryKey = () => [`/listpackagingtypes`];

    
export type GetListpackagingtypesQueryResult = NonNullable<Awaited<ReturnType<typeof getListpackagingtypes>>>
export type GetListpackagingtypesQueryError = AxiosError<unknown>

export const useGetListpackagingtypes = <TData = Awaited<ReturnType<typeof getListpackagingtypes>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getListpackagingtypes>>, TError, TData>, axios?: AxiosRequestConfig}

  ): UseQueryStoreResult<Awaited<ReturnType<typeof getListpackagingtypes>>, TError, TData, QueryKey> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetListpackagingtypesQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getListpackagingtypes>>> = ({ signal }) => getListpackagingtypes({ signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof getListpackagingtypes>>, TError, TData>(queryKey, queryFn, queryOptions) as UseQueryStoreResult<Awaited<ReturnType<typeof getListpackagingtypes>>, TError, TData, QueryKey> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * CreateStatusesAccessCode
 * @summary CreateStatusesAccessCode
 */
export const postCreatestatusesaccesscode = (
    restA1BundledStatusesCreateModel: RestA1BundledStatusesCreateModel, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Boolean>> => {
    return axios.post(
      `/createstatusesaccesscode`,
      restA1BundledStatusesCreateModel,options
    );
  }



    export type PostCreatestatusesaccesscodeMutationResult = NonNullable<Awaited<ReturnType<typeof postCreatestatusesaccesscode>>>
    export type PostCreatestatusesaccesscodeMutationBody = RestA1BundledStatusesCreateModel
    export type PostCreatestatusesaccesscodeMutationError = AxiosError<unknown>

    export const usePostCreatestatusesaccesscode = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCreatestatusesaccesscode>>, TError,{data: RestA1BundledStatusesCreateModel}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCreatestatusesaccesscode>>, {data: RestA1BundledStatusesCreateModel}> = (props) => {
          const {data} = props ?? {};

          return  postCreatestatusesaccesscode(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postCreatestatusesaccesscode>>, TError, {data: RestA1BundledStatusesCreateModel}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * ChangePassword
 * @summary ChangePassword
 */
export const postChangepassword = (
    restA1ChangePasswordModel: RestA1ChangePasswordModel, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserModel>> => {
    return axios.post(
      `/changepassword`,
      restA1ChangePasswordModel,options
    );
  }



    export type PostChangepasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postChangepassword>>>
    export type PostChangepasswordMutationBody = RestA1ChangePasswordModel
    export type PostChangepasswordMutationError = AxiosError<unknown>

    export const usePostChangepassword = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChangepassword>>, TError,{data: RestA1ChangePasswordModel}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postChangepassword>>, {data: RestA1ChangePasswordModel}> = (props) => {
          const {data} = props ?? {};

          return  postChangepassword(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postChangepassword>>, TError, {data: RestA1ChangePasswordModel}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * GetAbout
 * @summary GetAbout
 */
export const getGetabout = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ListPairStringString>> => {
    return axios.get(
      `/getabout`,options
    );
  }


export const getGetGetaboutQueryKey = () => [`/getabout`];

    
export type GetGetaboutQueryResult = NonNullable<Awaited<ReturnType<typeof getGetabout>>>
export type GetGetaboutQueryError = AxiosError<unknown>

export const useGetGetabout = <TData = Awaited<ReturnType<typeof getGetabout>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getGetabout>>, TError, TData>, axios?: AxiosRequestConfig}

  ): UseQueryStoreResult<Awaited<ReturnType<typeof getGetabout>>, TError, TData, QueryKey> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGetaboutQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGetabout>>> = ({ signal }) => getGetabout({ signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof getGetabout>>, TError, TData>(queryKey, queryFn, queryOptions) as UseQueryStoreResult<Awaited<ReturnType<typeof getGetabout>>, TError, TData, QueryKey> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * SetPlanningLicensePlate
 * @summary SetPlanningLicensePlate
 */
export const postSetplanninglicenseplate = (
    restA2IntString: RestA2IntString, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlanningModel>> => {
    return axios.post(
      `/setplanninglicenseplate`,
      restA2IntString,options
    );
  }



    export type PostSetplanninglicenseplateMutationResult = NonNullable<Awaited<ReturnType<typeof postSetplanninglicenseplate>>>
    export type PostSetplanninglicenseplateMutationBody = RestA2IntString
    export type PostSetplanninglicenseplateMutationError = AxiosError<unknown>

    export const usePostSetplanninglicenseplate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSetplanninglicenseplate>>, TError,{data: RestA2IntString}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSetplanninglicenseplate>>, {data: RestA2IntString}> = (props) => {
          const {data} = props ?? {};

          return  postSetplanninglicenseplate(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postSetplanninglicenseplate>>, TError, {data: RestA2IntString}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * ListAccessCodes
 * @summary ListAccessCodes
 */
export const postListaccesscodes = (
    restA2PaginationInt: RestA2PaginationInt, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AccessCodePlanningPaginationResult>> => {
    return axios.post(
      `/listaccesscodes`,
      restA2PaginationInt,options
    );
  }



    export type PostListaccesscodesMutationResult = NonNullable<Awaited<ReturnType<typeof postListaccesscodes>>>
    export type PostListaccesscodesMutationBody = RestA2PaginationInt
    export type PostListaccesscodesMutationError = AxiosError<unknown>

    export const usePostListaccesscodes = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postListaccesscodes>>, TError,{data: RestA2PaginationInt}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postListaccesscodes>>, {data: RestA2PaginationInt}> = (props) => {
          const {data} = props ?? {};

          return  postListaccesscodes(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postListaccesscodes>>, TError, {data: RestA2PaginationInt}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * ListAllShipments
 * @summary ListAllShipments
 */
export const postListallshipments = (
    restA1Pagination: RestA1Pagination, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ShipmentPaginationResult>> => {
    return axios.post(
      `/listallshipments`,
      restA1Pagination,options
    );
  }



    export type PostListallshipmentsMutationResult = NonNullable<Awaited<ReturnType<typeof postListallshipments>>>
    export type PostListallshipmentsMutationBody = RestA1Pagination
    export type PostListallshipmentsMutationError = AxiosError<unknown>

    export const usePostListallshipments = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postListallshipments>>, TError,{data: RestA1Pagination}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postListallshipments>>, {data: RestA1Pagination}> = (props) => {
          const {data} = props ?? {};

          return  postListallshipments(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postListallshipments>>, TError, {data: RestA1Pagination}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * SharePlanning
 * @summary SharePlanning
 */
export const postShareplanning = (
    restA1Int: RestA1Int, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Boolean>> => {
    return axios.post(
      `/shareplanning`,
      restA1Int,options
    );
  }



    export type PostShareplanningMutationResult = NonNullable<Awaited<ReturnType<typeof postShareplanning>>>
    export type PostShareplanningMutationBody = RestA1Int
    export type PostShareplanningMutationError = AxiosError<unknown>

    export const usePostShareplanning = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postShareplanning>>, TError,{data: RestA1Int}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postShareplanning>>, {data: RestA1Int}> = (props) => {
          const {data} = props ?? {};

          return  postShareplanning(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postShareplanning>>, TError, {data: RestA1Int}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * SharePlanningAccessCode
 * @summary SharePlanningAccessCode
 */
export const getShareplanningaccesscode = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Boolean>> => {
    return axios.get(
      `/shareplanningaccesscode`,options
    );
  }


export const getGetShareplanningaccesscodeQueryKey = () => [`/shareplanningaccesscode`];

    
export type GetShareplanningaccesscodeQueryResult = NonNullable<Awaited<ReturnType<typeof getShareplanningaccesscode>>>
export type GetShareplanningaccesscodeQueryError = AxiosError<unknown>

export const useGetShareplanningaccesscode = <TData = Awaited<ReturnType<typeof getShareplanningaccesscode>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getShareplanningaccesscode>>, TError, TData>, axios?: AxiosRequestConfig}

  ): UseQueryStoreResult<Awaited<ReturnType<typeof getShareplanningaccesscode>>, TError, TData, QueryKey> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetShareplanningaccesscodeQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getShareplanningaccesscode>>> = ({ signal }) => getShareplanningaccesscode({ signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof getShareplanningaccesscode>>, TError, TData>(queryKey, queryFn, queryOptions) as UseQueryStoreResult<Awaited<ReturnType<typeof getShareplanningaccesscode>>, TError, TData, QueryKey> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * GetShipment
 * @summary GetShipment
 */
export const postGetshipment = (
    restA1Int: RestA1Int, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ShipmentModel>> => {
    return axios.post(
      `/getshipment`,
      restA1Int,options
    );
  }



    export type PostGetshipmentMutationResult = NonNullable<Awaited<ReturnType<typeof postGetshipment>>>
    export type PostGetshipmentMutationBody = RestA1Int
    export type PostGetshipmentMutationError = AxiosError<unknown>

    export const usePostGetshipment = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postGetshipment>>, TError,{data: RestA1Int}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postGetshipment>>, {data: RestA1Int}> = (props) => {
          const {data} = props ?? {};

          return  postGetshipment(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postGetshipment>>, TError, {data: RestA1Int}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * DeleteUser
 * @summary DeleteUser
 */
export const postDeleteuser = (
    restA1Int: RestA1Int, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Boolean>> => {
    return axios.post(
      `/deleteuser`,
      restA1Int,options
    );
  }



    export type PostDeleteuserMutationResult = NonNullable<Awaited<ReturnType<typeof postDeleteuser>>>
    export type PostDeleteuserMutationBody = RestA1Int
    export type PostDeleteuserMutationError = AxiosError<unknown>

    export const usePostDeleteuser = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDeleteuser>>, TError,{data: RestA1Int}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDeleteuser>>, {data: RestA1Int}> = (props) => {
          const {data} = props ?? {};

          return  postDeleteuser(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postDeleteuser>>, TError, {data: RestA1Int}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * UpdateConsignment
 * @summary UpdateConsignment
 */
export const postUpdateconsignment = (
    restA1ConsignmentUpdateModel: RestA1ConsignmentUpdateModel, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ConsignmentModel>> => {
    return axios.post(
      `/updateconsignment`,
      restA1ConsignmentUpdateModel,options
    );
  }



    export type PostUpdateconsignmentMutationResult = NonNullable<Awaited<ReturnType<typeof postUpdateconsignment>>>
    export type PostUpdateconsignmentMutationBody = RestA1ConsignmentUpdateModel
    export type PostUpdateconsignmentMutationError = AxiosError<unknown>

    export const usePostUpdateconsignment = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUpdateconsignment>>, TError,{data: RestA1ConsignmentUpdateModel}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUpdateconsignment>>, {data: RestA1ConsignmentUpdateModel}> = (props) => {
          const {data} = props ?? {};

          return  postUpdateconsignment(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postUpdateconsignment>>, TError, {data: RestA1ConsignmentUpdateModel}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * CreateIDStatusesAccessCode
 * @summary CreateIDStatusesAccessCode
 */
export const postCreateidstatusesaccesscode = (
    restA1BundledStatusesIDCreateModel: RestA1BundledStatusesIDCreateModel, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Boolean>> => {
    return axios.post(
      `/createidstatusesaccesscode`,
      restA1BundledStatusesIDCreateModel,options
    );
  }



    export type PostCreateidstatusesaccesscodeMutationResult = NonNullable<Awaited<ReturnType<typeof postCreateidstatusesaccesscode>>>
    export type PostCreateidstatusesaccesscodeMutationBody = RestA1BundledStatusesIDCreateModel
    export type PostCreateidstatusesaccesscodeMutationError = AxiosError<unknown>

    export const usePostCreateidstatusesaccesscode = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCreateidstatusesaccesscode>>, TError,{data: RestA1BundledStatusesIDCreateModel}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCreateidstatusesaccesscode>>, {data: RestA1BundledStatusesIDCreateModel}> = (props) => {
          const {data} = props ?? {};

          return  postCreateidstatusesaccesscode(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postCreateidstatusesaccesscode>>, TError, {data: RestA1BundledStatusesIDCreateModel}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * ListUsers
 * @summary ListUsers
 */
export const postListusers = (
    restA1Pagination: RestA1Pagination, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserPaginationResult>> => {

    // return 'localhost:8080/listusers', restA1Pagination, options
    return axios.post(
      `/listusers`,
      restA1Pagination,options
    );
  }



    export type PostListusersMutationResult = NonNullable<Awaited<ReturnType<typeof postListusers>>>
    export type PostListusersMutationBody = RestA1Pagination
    export type PostListusersMutationError = AxiosError<unknown>

    export const usePostListusers = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postListusers>>, TError,{data: RestA1Pagination}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postListusers>>, {data: RestA1Pagination}> = (props) => {
          const {data} = props ?? {};

          return  postListusers(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postListusers>>, TError, {data: RestA1Pagination}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * GetConsignmentAccessCode
 * @summary GetConsignmentAccessCode
 */
export const postGetconsignmentaccesscode = (
    restA1Int: RestA1Int, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ConsignmentModel>> => {
    return axios.post(
      `/getconsignmentaccesscode`,
      restA1Int,options
    );
  }



    export type PostGetconsignmentaccesscodeMutationResult = NonNullable<Awaited<ReturnType<typeof postGetconsignmentaccesscode>>>
    export type PostGetconsignmentaccesscodeMutationBody = RestA1Int
    export type PostGetconsignmentaccesscodeMutationError = AxiosError<unknown>

    export const usePostGetconsignmentaccesscode = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postGetconsignmentaccesscode>>, TError,{data: RestA1Int}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postGetconsignmentaccesscode>>, {data: RestA1Int}> = (props) => {
          const {data} = props ?? {};

          return  postGetconsignmentaccesscode(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postGetconsignmentaccesscode>>, TError, {data: RestA1Int}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * CreateAccessCodeNotification
 * @summary CreateAccessCodeNotification
 */
export const postCreateaccesscodenotification = (
    restA2UUIDAccessCodeNotificationCreate: RestA2UUIDAccessCodeNotificationCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Boolean>> => {
    return axios.post(
      `/createaccesscodenotification`,
      restA2UUIDAccessCodeNotificationCreate,options
    );
  }



    export type PostCreateaccesscodenotificationMutationResult = NonNullable<Awaited<ReturnType<typeof postCreateaccesscodenotification>>>
    export type PostCreateaccesscodenotificationMutationBody = RestA2UUIDAccessCodeNotificationCreate
    export type PostCreateaccesscodenotificationMutationError = AxiosError<unknown>

    export const usePostCreateaccesscodenotification = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCreateaccesscodenotification>>, TError,{data: RestA2UUIDAccessCodeNotificationCreate}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCreateaccesscodenotification>>, {data: RestA2UUIDAccessCodeNotificationCreate}> = (props) => {
          const {data} = props ?? {};

          return  postCreateaccesscodenotification(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postCreateaccesscodenotification>>, TError, {data: RestA2UUIDAccessCodeNotificationCreate}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * ListPlannings
 * @summary ListPlannings
 */
export const postListplannings = (
    restA2PaginationBoolean: RestA2PaginationBoolean, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlanningPaginationResult>> => {
    return axios.post(
      `/listplannings`,
      restA2PaginationBoolean,options
    );
  }



    export type PostListplanningsMutationResult = NonNullable<Awaited<ReturnType<typeof postListplannings>>>
    export type PostListplanningsMutationBody = RestA2PaginationBoolean
    export type PostListplanningsMutationError = AxiosError<unknown>

    export const usePostListplannings = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postListplannings>>, TError,{data: RestA2PaginationBoolean}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postListplannings>>, {data: RestA2PaginationBoolean}> = (props) => {
          const {data} = props ?? {};

          return  postListplannings(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postListplannings>>, TError, {data: RestA2PaginationBoolean}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * RenewMessage
 * @summary RenewMessage
 */
export const postRenewmessage = (
    restA1Int: RestA1Int, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Boolean>> => {
    return axios.post(
      `/renewmessage`,
      restA1Int,options
    );
  }



    export type PostRenewmessageMutationResult = NonNullable<Awaited<ReturnType<typeof postRenewmessage>>>
    export type PostRenewmessageMutationBody = RestA1Int
    export type PostRenewmessageMutationError = AxiosError<unknown>

    export const usePostRenewmessage = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRenewmessage>>, TError,{data: RestA1Int}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRenewmessage>>, {data: RestA1Int}> = (props) => {
          const {data} = props ?? {};

          return  postRenewmessage(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postRenewmessage>>, TError, {data: RestA1Int}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * CreateShipment
 * @summary CreateShipment
 */
export const postCreateshipment = (
    restA1ShipmentCreateModel: RestA1ShipmentCreateModel, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ShipmentModel>> => {
    return axios.post(
      `/createshipment`,
      restA1ShipmentCreateModel,options
    );
  }



    export type PostCreateshipmentMutationResult = NonNullable<Awaited<ReturnType<typeof postCreateshipment>>>
    export type PostCreateshipmentMutationBody = RestA1ShipmentCreateModel
    export type PostCreateshipmentMutationError = AxiosError<unknown>

    export const usePostCreateshipment = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCreateshipment>>, TError,{data: RestA1ShipmentCreateModel}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCreateshipment>>, {data: RestA1ShipmentCreateModel}> = (props) => {
          const {data} = props ?? {};

          return  postCreateshipment(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postCreateshipment>>, TError, {data: RestA1ShipmentCreateModel}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * GetPlanningByStop
 * @summary GetPlanningByStop
 */
export const postGetplanningbystop = (
    restA1Int: RestA1Int, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlanningModel>> => {
    return axios.post(
      `/getplanningbystop`,
      restA1Int,options
    );
  }



    export type PostGetplanningbystopMutationResult = NonNullable<Awaited<ReturnType<typeof postGetplanningbystop>>>
    export type PostGetplanningbystopMutationBody = RestA1Int
    export type PostGetplanningbystopMutationError = AxiosError<unknown>

    export const usePostGetplanningbystop = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postGetplanningbystop>>, TError,{data: RestA1Int}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postGetplanningbystop>>, {data: RestA1Int}> = (props) => {
          const {data} = props ?? {};

          return  postGetplanningbystop(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postGetplanningbystop>>, TError, {data: RestA1Int}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * CreateAccessCode
 * @summary CreateAccessCode
 */
export const postCreateaccesscode = (
    restA1CreateAccessCodePlanningModel: RestA1CreateAccessCodePlanningModel, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AccessCodePlanningModel>> => {
    return axios.post(
      `/createaccesscode`,
      restA1CreateAccessCodePlanningModel,options
    );
  }



    export type PostCreateaccesscodeMutationResult = NonNullable<Awaited<ReturnType<typeof postCreateaccesscode>>>
    export type PostCreateaccesscodeMutationBody = RestA1CreateAccessCodePlanningModel
    export type PostCreateaccesscodeMutationError = AxiosError<unknown>

    export const usePostCreateaccesscode = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCreateaccesscode>>, TError,{data: RestA1CreateAccessCodePlanningModel}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCreateaccesscode>>, {data: RestA1CreateAccessCodePlanningModel}> = (props) => {
          const {data} = props ?? {};

          return  postCreateaccesscode(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postCreateaccesscode>>, TError, {data: RestA1CreateAccessCodePlanningModel}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * GraphqlCreator
 * @summary GraphqlCreator
 */
export const postGraphqlcreator = (
    restA1GenericImport: RestA1GenericImport, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Boolean>> => {
    return axios.post(
      `/graphqlcreator`,
      restA1GenericImport,options
    );
  }



    export type PostGraphqlcreatorMutationResult = NonNullable<Awaited<ReturnType<typeof postGraphqlcreator>>>
    export type PostGraphqlcreatorMutationBody = RestA1GenericImport
    export type PostGraphqlcreatorMutationError = AxiosError<unknown>

    export const usePostGraphqlcreator = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postGraphqlcreator>>, TError,{data: RestA1GenericImport}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postGraphqlcreator>>, {data: RestA1GenericImport}> = (props) => {
          const {data} = props ?? {};

          return  postGraphqlcreator(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postGraphqlcreator>>, TError, {data: RestA1GenericImport}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * ChangeOwnPassword
 * @summary ChangeOwnPassword
 */
export const postChangeownpassword = (
    restA1ChangeOwnPasswordModel: RestA1ChangeOwnPasswordModel, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserModel>> => {
    return axios.post(
      `/changeownpassword`,
      restA1ChangeOwnPasswordModel,options
    );
  }



    export type PostChangeownpasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postChangeownpassword>>>
    export type PostChangeownpasswordMutationBody = RestA1ChangeOwnPasswordModel
    export type PostChangeownpasswordMutationError = AxiosError<unknown>

    export const usePostChangeownpassword = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChangeownpassword>>, TError,{data: RestA1ChangeOwnPasswordModel}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postChangeownpassword>>, {data: RestA1ChangeOwnPasswordModel}> = (props) => {
          const {data} = props ?? {};

          return  postChangeownpassword(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postChangeownpassword>>, TError, {data: RestA1ChangeOwnPasswordModel}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * UpdateFirebaseToken
 * @summary UpdateFirebaseToken
 */
export const postUpdatefirebasetoken = (
    restA1String: RestA1String, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Boolean>> => {
    return axios.post(
      `/updatefirebasetoken`,
      restA1String,options
    );
  }



    export type PostUpdatefirebasetokenMutationResult = NonNullable<Awaited<ReturnType<typeof postUpdatefirebasetoken>>>
    export type PostUpdatefirebasetokenMutationBody = RestA1String
    export type PostUpdatefirebasetokenMutationError = AxiosError<unknown>

    export const usePostUpdatefirebasetoken = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUpdatefirebasetoken>>, TError,{data: RestA1String}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUpdatefirebasetoken>>, {data: RestA1String}> = (props) => {
          const {data} = props ?? {};

          return  postUpdatefirebasetoken(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postUpdatefirebasetoken>>, TError, {data: RestA1String}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * ImportStatus
 * @summary ImportStatus
 */
export const postImportstatus = (
    restA1BundledStatusesIDCreateModel: RestA1BundledStatusesIDCreateModel, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Boolean>> => {
    return axios.post(
      `/importstatus`,
      restA1BundledStatusesIDCreateModel,options
    );
  }



    export type PostImportstatusMutationResult = NonNullable<Awaited<ReturnType<typeof postImportstatus>>>
    export type PostImportstatusMutationBody = RestA1BundledStatusesIDCreateModel
    export type PostImportstatusMutationError = AxiosError<unknown>

    export const usePostImportstatus = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postImportstatus>>, TError,{data: RestA1BundledStatusesIDCreateModel}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postImportstatus>>, {data: RestA1BundledStatusesIDCreateModel}> = (props) => {
          const {data} = props ?? {};

          return  postImportstatus(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postImportstatus>>, TError, {data: RestA1BundledStatusesIDCreateModel}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * LoginUser
 * @summary LoginUser
 */
export const postLoginuser = (
    restA1LoginUserModel: RestA1LoginUserModel, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<String>> => {
    return axios.post(
      `/loginuser`,
      restA1LoginUserModel,options
    );
  }



    export type PostLoginuserMutationResult = NonNullable<Awaited<ReturnType<typeof postLoginuser>>>
    export type PostLoginuserMutationBody = RestA1LoginUserModel
    export type PostLoginuserMutationError = AxiosError<unknown>

    export const usePostLoginuser = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLoginuser>>, TError,{data: RestA1LoginUserModel}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLoginuser>>, {data: RestA1LoginUserModel}> = (props) => {
          const {data} = props ?? {};

          return  postLoginuser(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postLoginuser>>, TError, {data: RestA1LoginUserModel}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * ListMessages
 * @summary ListMessages
 */
export const postListmessages = (
    restA1Pagination: RestA1Pagination, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MessagePaginationResult>> => {
    return axios.post(
      `/listmessages`,
      restA1Pagination,options
    );
  }



    export type PostListmessagesMutationResult = NonNullable<Awaited<ReturnType<typeof postListmessages>>>
    export type PostListmessagesMutationBody = RestA1Pagination
    export type PostListmessagesMutationError = AxiosError<unknown>

    export const usePostListmessages = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postListmessages>>, TError,{data: RestA1Pagination}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postListmessages>>, {data: RestA1Pagination}> = (props) => {
          const {data} = props ?? {};

          return  postListmessages(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postListmessages>>, TError, {data: RestA1Pagination}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * GetConsignment
 * @summary GetConsignment
 */
export const postGetconsignment = (
    restA1Int: RestA1Int, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ConsignmentModel>> => {
    return axios.post(
      `/getconsignment`,
      restA1Int,options
    );
  }



    export type PostGetconsignmentMutationResult = NonNullable<Awaited<ReturnType<typeof postGetconsignment>>>
    export type PostGetconsignmentMutationBody = RestA1Int
    export type PostGetconsignmentMutationError = AxiosError<unknown>

    export const usePostGetconsignment = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postGetconsignment>>, TError,{data: RestA1Int}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postGetconsignment>>, {data: RestA1Int}> = (props) => {
          const {data} = props ?? {};

          return  postGetconsignment(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postGetconsignment>>, TError, {data: RestA1Int}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * GetUser
 * @summary GetUser
 */
export const postGetuser = (
    restA1Int: RestA1Int, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserModel>> => {
    return axios.post(
      `/getuser`,
      restA1Int,options
    );
  }



    export type PostGetuserMutationResult = NonNullable<Awaited<ReturnType<typeof postGetuser>>>
    export type PostGetuserMutationBody = RestA1Int
    export type PostGetuserMutationError = AxiosError<unknown>

    export const usePostGetuser = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postGetuser>>, TError,{data: RestA1Int}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postGetuser>>, {data: RestA1Int}> = (props) => {
          const {data} = props ?? {};

          return  postGetuser(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postGetuser>>, TError, {data: RestA1Int}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * ListSelfPlanningsAccessCode
 * @summary ListSelfPlanningsAccessCode
 */
export const postListselfplanningsaccesscode = (
    restA1Pagination: RestA1Pagination, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlanningPaginationResult>> => {
    return axios.post(
      `/listselfplanningsaccesscode`,
      restA1Pagination,options
    );
  }



    export type PostListselfplanningsaccesscodeMutationResult = NonNullable<Awaited<ReturnType<typeof postListselfplanningsaccesscode>>>
    export type PostListselfplanningsaccesscodeMutationBody = RestA1Pagination
    export type PostListselfplanningsaccesscodeMutationError = AxiosError<unknown>

    export const usePostListselfplanningsaccesscode = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postListselfplanningsaccesscode>>, TError,{data: RestA1Pagination}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postListselfplanningsaccesscode>>, {data: RestA1Pagination}> = (props) => {
          const {data} = props ?? {};

          return  postListselfplanningsaccesscode(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postListselfplanningsaccesscode>>, TError, {data: RestA1Pagination}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * ListShipments
 * @summary ListShipments
 */
export const postListshipments = (
    restA2PaginationBoolean: RestA2PaginationBoolean, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ShipmentPaginationResult>> => {
    return axios.post(
      `/listshipments`,
      restA2PaginationBoolean,options
    );
  }



    export type PostListshipmentsMutationResult = NonNullable<Awaited<ReturnType<typeof postListshipments>>>
    export type PostListshipmentsMutationBody = RestA2PaginationBoolean
    export type PostListshipmentsMutationError = AxiosError<unknown>

    export const usePostListshipments = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postListshipments>>, TError,{data: RestA2PaginationBoolean}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postListshipments>>, {data: RestA2PaginationBoolean}> = (props) => {
          const {data} = props ?? {};

          return  postListshipments(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postListshipments>>, TError, {data: RestA2PaginationBoolean}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * CreateStatuses
 * @summary CreateStatuses
 */
export const postCreatestatuses = (
    restA1BundledStatusesCreateModel: RestA1BundledStatusesCreateModel, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Boolean>> => {
    return axios.post(
      `/createstatuses`,
      restA1BundledStatusesCreateModel,options
    );
  }



    export type PostCreatestatusesMutationResult = NonNullable<Awaited<ReturnType<typeof postCreatestatuses>>>
    export type PostCreatestatusesMutationBody = RestA1BundledStatusesCreateModel
    export type PostCreatestatusesMutationError = AxiosError<unknown>

    export const usePostCreatestatuses = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCreatestatuses>>, TError,{data: RestA1BundledStatusesCreateModel}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCreatestatuses>>, {data: RestA1BundledStatusesCreateModel}> = (props) => {
          const {data} = props ?? {};

          return  postCreatestatuses(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postCreatestatuses>>, TError, {data: RestA1BundledStatusesCreateModel}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * AuthenticatedUser
 * @summary AuthenticatedUser
 */
export const getAuthenticateduser = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserModel>> => {
    return axios.get(
      `/authenticateduser`,options
    );
  }


export const getGetAuthenticateduserQueryKey = () => [`/authenticateduser`];

    
export type GetAuthenticateduserQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthenticateduser>>>
export type GetAuthenticateduserQueryError = AxiosError<unknown>

export const useGetAuthenticateduser = <TData = Awaited<ReturnType<typeof getAuthenticateduser>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAuthenticateduser>>, TError, TData>, axios?: AxiosRequestConfig}

  ): UseQueryStoreResult<Awaited<ReturnType<typeof getAuthenticateduser>>, TError, TData, QueryKey> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAuthenticateduserQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthenticateduser>>> = ({ signal }) => getAuthenticateduser({ signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof getAuthenticateduser>>, TError, TData>(queryKey, queryFn, queryOptions) as UseQueryStoreResult<Awaited<ReturnType<typeof getAuthenticateduser>>, TError, TData, QueryKey> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * GetReport
 * @summary GetReport
 */
export const postGetreport = (
    restA1Pagination: RestA1Pagination, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ReportModel>> => {
    return axios.post(
      `/getreport`,
      restA1Pagination,options
    );
  }



    export type PostGetreportMutationResult = NonNullable<Awaited<ReturnType<typeof postGetreport>>>
    export type PostGetreportMutationBody = RestA1Pagination
    export type PostGetreportMutationError = AxiosError<unknown>

    export const usePostGetreport = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postGetreport>>, TError,{data: RestA1Pagination}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postGetreport>>, {data: RestA1Pagination}> = (props) => {
          const {data} = props ?? {};

          return  postGetreport(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postGetreport>>, TError, {data: RestA1Pagination}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * UserExists
 * @summary UserExists
 */
export const postUserexists = (
    restA1Email: RestA1Email, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Boolean>> => {
    return axios.post(
      `/userexists`,
      restA1Email,options
    );
  }



    export type PostUserexistsMutationResult = NonNullable<Awaited<ReturnType<typeof postUserexists>>>
    export type PostUserexistsMutationBody = RestA1Email
    export type PostUserexistsMutationError = AxiosError<unknown>

    export const usePostUserexists = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserexists>>, TError,{data: RestA1Email}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserexists>>, {data: RestA1Email}> = (props) => {
          const {data} = props ?? {};

          return  postUserexists(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postUserexists>>, TError, {data: RestA1Email}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Sync
 * @summary Sync
 */
export const getSync = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Boolean>> => {
    return axios.get(
      `/sync`,options
    );
  }


export const getGetSyncQueryKey = () => [`/sync`];

    
export type GetSyncQueryResult = NonNullable<Awaited<ReturnType<typeof getSync>>>
export type GetSyncQueryError = AxiosError<unknown>

export const useGetSync = <TData = Awaited<ReturnType<typeof getSync>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSync>>, TError, TData>, axios?: AxiosRequestConfig}

  ): UseQueryStoreResult<Awaited<ReturnType<typeof getSync>>, TError, TData, QueryKey> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSyncQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSync>>> = ({ signal }) => getSync({ signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof getSync>>, TError, TData>(queryKey, queryFn, queryOptions) as UseQueryStoreResult<Awaited<ReturnType<typeof getSync>>, TError, TData, QueryKey> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * CreateUpdatePlanning
 * @summary CreateUpdatePlanning
 */
export const postCreateupdateplanning = (
    restA2PlanningCreateModelBoolean: RestA2PlanningCreateModelBoolean, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlanningModel>> => {
    return axios.post(
      `/createupdateplanning`,
      restA2PlanningCreateModelBoolean,options
    );
  }



    export type PostCreateupdateplanningMutationResult = NonNullable<Awaited<ReturnType<typeof postCreateupdateplanning>>>
    export type PostCreateupdateplanningMutationBody = RestA2PlanningCreateModelBoolean
    export type PostCreateupdateplanningMutationError = AxiosError<unknown>

    export const usePostCreateupdateplanning = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCreateupdateplanning>>, TError,{data: RestA2PlanningCreateModelBoolean}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCreateupdateplanning>>, {data: RestA2PlanningCreateModelBoolean}> = (props) => {
          const {data} = props ?? {};

          return  postCreateupdateplanning(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postCreateupdateplanning>>, TError, {data: RestA2PlanningCreateModelBoolean}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * CreateIDStatuses
 * @summary CreateIDStatuses
 */
export const postCreateidstatuses = (
    restA1BundledStatusesIDCreateModel: RestA1BundledStatusesIDCreateModel, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Boolean>> => {
    return axios.post(
      `/createidstatuses`,
      restA1BundledStatusesIDCreateModel,options
    );
  }



    export type PostCreateidstatusesMutationResult = NonNullable<Awaited<ReturnType<typeof postCreateidstatuses>>>
    export type PostCreateidstatusesMutationBody = RestA1BundledStatusesIDCreateModel
    export type PostCreateidstatusesMutationError = AxiosError<unknown>

    export const usePostCreateidstatuses = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCreateidstatuses>>, TError,{data: RestA1BundledStatusesIDCreateModel}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCreateidstatuses>>, {data: RestA1BundledStatusesIDCreateModel}> = (props) => {
          const {data} = props ?? {};

          return  postCreateidstatuses(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postCreateidstatuses>>, TError, {data: RestA1BundledStatusesIDCreateModel}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * ListSelfPlannings
 * @summary ListSelfPlannings
 */
export const postListselfplannings = (
    restA1Pagination: RestA1Pagination, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlanningPaginationResult>> => {
    return axios.post(
      `/listselfplannings`,
      restA1Pagination,options
    );
  }



    export type PostListselfplanningsMutationResult = NonNullable<Awaited<ReturnType<typeof postListselfplannings>>>
    export type PostListselfplanningsMutationBody = RestA1Pagination
    export type PostListselfplanningsMutationError = AxiosError<unknown>

    export const usePostListselfplannings = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postListselfplannings>>, TError,{data: RestA1Pagination}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postListselfplannings>>, {data: RestA1Pagination}> = (props) => {
          const {data} = props ?? {};

          return  postListselfplannings(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postListselfplannings>>, TError, {data: RestA1Pagination}, TContext>(mutationFn, mutationOptions)
    }
    